---
import Layout from "@layouts/Layout.astro";
import Container from "@layouts/Container.astro";
import { getEntry, getCollection, type CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const diplomas = await getCollection("diplomas");
  const uniqueSubFolders = [
    ...new Set(
      diplomas
        .map((entry) => entry.data.subFolder)
        .filter((subFolder) => subFolder !== undefined)
    ),
  ];

  return uniqueSubFolders.map((subFolder) => ({
    params: { subFolder },
  }));
}
const diplomas = await getCollection("diplomas");
const diplom = await getEntry("pages", "diplomas");

interface Group {
  [season: string]: CollectionEntry<"diplomas">[];
}
const groupedBySubFolder: Group = diplomas.reduce((acc, item) => {
  const key = item.data.subFolder ? item.data.subFolder : "";

  if (!acc[key]) {
    acc[key] = [];
  }
  acc[key].push(item);
  return acc;
}, {} as Group);

const { title, description, color } = diplom.data;
const subFolder = Astro.params.subFolder;

const { Content, headings } = await diplom.render();
---

<Layout {title} {description} {color}>
  <div
    class="flex flex-col items-center justify-center text-yellow prose-headings:text-cyan prose-a:text-cyan"
  >
    <Container>
      <ul class="p-0 m-0 inline">
        <li
          class="font-sans inline text-3xl leading-none md:leading-none md:text-5xl text-cyan font-bold list-none"
        >
          {subFolder}
        </li>
        <br />
        {
          subFolder &&
            groupedBySubFolder[subFolder].map((d: any) => (
              <a
                href={`/diplomas/${d.data.subFolder ? d.data.subFolder + "/" : ""}${d.slug}`}
                class="no-underline "
              >
                <li class="font-sans inline text-3xl leading-none md:leading-none  md:text-5xl font-bold list-none">
                  {d.data.title}
                </li>
              </a>
            ))
        }
      </ul>
      <br />
      <br />
    </Container>
  </div>
</Layout>
